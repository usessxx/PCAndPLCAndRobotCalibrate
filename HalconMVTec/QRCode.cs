using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HalconDotNet;

namespace HalconMVTec
{
    public partial class QRCode
    {
        public string QRCodeAction(HObject ho_Image_input)
        {
            string result = "";
            try
            {
                // Stack for temporary objects 
                HObject[] OTemp = new HObject[20];

                // Local iconic variables 

                HObject ho_Image, ho_Image1, ho_Image2, ho_Image3;
                HObject ho_ImageScaled, ho_Regions, ho_ConnectedRegions;
                HObject ho_RegionFillUp, ho_SelectedRegions, ho_SelectedRegions1;
                HObject ho_EmptyObject, ho_Circle = null, ho_Image4, ho_Rectangle;
                HObject ho_SymbolXLDs;

                // Local control variables 

                HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
                HTuple hv_WindowHandle = new HTuple(), hv_Area = new HTuple();
                HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
                HTuple hv_i = new HTuple(), hv_WindowHandle1 = new HTuple();
                HTuple hv_DataCodeHandle = new HTuple(), hv_ResultHandles = new HTuple();
                HTuple hv_DecodedDataStrings = new HTuple();
                // Initialize local and output iconic variables 
                HOperatorSet.GenEmptyObj(out ho_Image);
                HOperatorSet.GenEmptyObj(out ho_Image1);
                HOperatorSet.GenEmptyObj(out ho_Image2);
                HOperatorSet.GenEmptyObj(out ho_Image3);
                HOperatorSet.GenEmptyObj(out ho_ImageScaled);
                HOperatorSet.GenEmptyObj(out ho_Regions);
                HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
                HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
                HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
                HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
                HOperatorSet.GenEmptyObj(out ho_EmptyObject);
                HOperatorSet.GenEmptyObj(out ho_Circle);
                HOperatorSet.GenEmptyObj(out ho_Image4);
                HOperatorSet.GenEmptyObj(out ho_Rectangle);
                HOperatorSet.GenEmptyObj(out ho_SymbolXLDs);

                //Image Acquisition 01: Code generated by Image Acquisition 01
                //读取图片，创建窗口并显示
                ho_Image.Dispose();
                //HOperatorSet.ReadImage(out ho_Image, "F:/3D AOI/0 量产机/参考/二维码.PNG");
                //if (HDevWindowStack.IsOpen())
                //{
                //    HOperatorSet.CloseWindow(HDevWindowStack.Pop());
                //}
                HOperatorSet.CopyImage(ho_Image_input, out ho_Image);
                hv_Width.Dispose(); hv_Height.Dispose();
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

                //HOperatorSet.SetWindowAttr("background_color", "black");
                //HOperatorSet.OpenWindow(0, 0, hv_Width, hv_Height, 0, "visible", "", out hv_WindowHandle);
                //HDevWindowStack.Push(hv_WindowHandle);
                //if (HDevWindowStack.IsOpen())
                //{
                //    HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
                //}

                //预处理
                ho_Image1.Dispose(); ho_Image2.Dispose(); ho_Image3.Dispose();
                HOperatorSet.Decompose3(ho_Image, out ho_Image1, out ho_Image2, out ho_Image3
                    );
                ho_ImageScaled.Dispose();
                HOperatorSet.ScaleImage(ho_Image2, out ho_ImageScaled, 2.04, -106);

                ho_Regions.Dispose();
                HOperatorSet.Threshold(ho_ImageScaled, out ho_Regions, 0, 148);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_ConnectedRegions, out ho_RegionFillUp);
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShape(ho_RegionFillUp, out ho_SelectedRegions, "area", "and",
                    32.47, 273.65);
                ho_SelectedRegions1.Dispose();
                HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions1, "circularity",
                    "and", 0.3, 1);
                hv_Area.Dispose(); hv_Row.Dispose(); hv_Column.Dispose();
                HOperatorSet.AreaCenter(ho_SelectedRegions1, out hv_Area, out hv_Row, out hv_Column);
                ho_EmptyObject.Dispose();
                HOperatorSet.GenEmptyObj(out ho_EmptyObject);

                for (hv_i = 0; (int)hv_i <= (int)((new HTuple(hv_Row.TupleLength())) - 1); hv_i = (int)hv_i + 1)
                {
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                        ho_Circle.Dispose();
                        HOperatorSet.GenCircle(out ho_Circle, hv_Row.TupleSelect(hv_i), hv_Column.TupleSelect(
                            hv_i), 6);
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_Circle, ho_EmptyObject, out ExpTmpOutVar_0);
                        ho_EmptyObject.Dispose();
                        ho_EmptyObject = ExpTmpOutVar_0;
                    }
                }

                //HOperatorSet.SetWindowAttr("background_color", "black");
                //HOperatorSet.OpenWindow(0, 0, hv_Width, hv_Height, 0, "visible", "", out hv_WindowHandle1);
                //HDevWindowStack.Push(hv_WindowHandle1);
                ho_Image4.Dispose();
                HOperatorSet.GenImageConst(out ho_Image4, "byte", hv_Width, hv_Height);
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_Rectangle, 0, 0, hv_Width, hv_Height);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.PaintRegion(ho_Rectangle, ho_Image4, out ExpTmpOutVar_0, 255, "fill");
                    ho_Image4.Dispose();
                    ho_Image4 = ExpTmpOutVar_0;
                }

                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.PaintRegion(ho_SelectedRegions1, ho_Image4, out ExpTmpOutVar_0,
                        0, "fill");
                    ho_Image4.Dispose();
                    ho_Image4 = ExpTmpOutVar_0;
                }
                //创建二维码模型
                hv_DataCodeHandle.Dispose();
                HOperatorSet.CreateDataCode2dModel("Data Matrix ECC 200", new HTuple(), new HTuple(),
                    out hv_DataCodeHandle);
                ho_SymbolXLDs.Dispose(); hv_ResultHandles.Dispose(); hv_DecodedDataStrings.Dispose();
                HOperatorSet.FindDataCode2d(ho_Image4, out ho_SymbolXLDs, hv_DataCodeHandle,
                    new HTuple(), new HTuple(), out hv_ResultHandles, out hv_DecodedDataStrings);

                result = hv_DecodedDataStrings.S.ToString();


                //if (HDevWindowStack.IsOpen())
                //{
                //    HOperatorSet.DispObj(ho_Image4, HDevWindowStack.GetActive());
                //}
                //if (HDevWindowStack.IsOpen())
                //{
                //    HOperatorSet.DispText(HDevWindowStack.GetActive(), hv_DecodedDataStrings, "image",
                //        10, 10, "black", new HTuple(), new HTuple());
                //}
                ho_Image.Dispose();
                ho_Image1.Dispose();
                ho_Image2.Dispose();
                ho_Image3.Dispose();
                ho_ImageScaled.Dispose();
                ho_Regions.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_RegionFillUp.Dispose();
                ho_SelectedRegions.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_EmptyObject.Dispose();
                ho_Circle.Dispose();
                ho_Image4.Dispose();
                ho_Rectangle.Dispose();
                ho_SymbolXLDs.Dispose();

                hv_Width.Dispose();
                hv_Height.Dispose();
                hv_WindowHandle.Dispose();
                hv_Area.Dispose();
                hv_Row.Dispose();
                hv_Column.Dispose();
                hv_i.Dispose();
                hv_WindowHandle1.Dispose();
                hv_DataCodeHandle.Dispose();
                hv_ResultHandles.Dispose();
                hv_DecodedDataStrings.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }
    }
}
