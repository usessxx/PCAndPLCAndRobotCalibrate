//
// File generated by HDevelop for HALCON/.NET (C#) Version 20.11.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
  // Chapter: XLD / Creation
  // Short Description: Creates an arrow shaped XLD contour. 
  public void gen_arrow_contour_xld (out HObject ho_Arrow, HTuple hv_Row1, HTuple hv_Column1, 
      HTuple hv_Row2, HTuple hv_Column2, HTuple hv_HeadLength, HTuple hv_HeadWidth)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_TempArrow=null;

    // Local control variables 

    HTuple hv_Length = new HTuple(), hv_ZeroLengthIndices = new HTuple();
    HTuple hv_DR = new HTuple(), hv_DC = new HTuple(), hv_HalfHeadWidth = new HTuple();
    HTuple hv_RowP1 = new HTuple(), hv_ColP1 = new HTuple();
    HTuple hv_RowP2 = new HTuple(), hv_ColP2 = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Arrow);
    HOperatorSet.GenEmptyObj(out ho_TempArrow);
    try
    {
      //This procedure generates arrow shaped XLD contours,
      //pointing from (Row1, Column1) to (Row2, Column2).
      //If starting and end point are identical, a contour consisting
      //of a single point is returned.
      //
      //input parameteres:
      //Row1, Column1: Coordinates of the arrows' starting points
      //Row2, Column2: Coordinates of the arrows' end points
      //HeadLength, HeadWidth: Size of the arrow heads in pixels
      //
      //output parameter:
      //Arrow: The resulting XLD contour
      //
      //The input tuples Row1, Column1, Row2, and Column2 have to be of
      //the same length.
      //HeadLength and HeadWidth either have to be of the same length as
      //Row1, Column1, Row2, and Column2 or have to be a single element.
      //If one of the above restrictions is violated, an error will occur.
      //
      //
      //Init
      ho_Arrow.Dispose();
      HOperatorSet.GenEmptyObj(out ho_Arrow);
      //
      //Calculate the arrow length
      hv_Length.Dispose();
      HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Length);
      //
      //Mark arrows with identical start and end point
      //(set Length to -1 to avoid division-by-zero exception)
      hv_ZeroLengthIndices.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZeroLengthIndices = hv_Length.TupleFind(
          0);
      }
      if ((int)(new HTuple(hv_ZeroLengthIndices.TupleNotEqual(-1))) != 0)
      {
        if (hv_Length == null)
          hv_Length = new HTuple();
        hv_Length[hv_ZeroLengthIndices] = -1;
      }
      //
      //Calculate auxiliary variables.
      hv_DR.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DR = (1.0*(hv_Row2-hv_Row1))/hv_Length;
      }
      hv_DC.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DC = (1.0*(hv_Column2-hv_Column1))/hv_Length;
      }
      hv_HalfHeadWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HalfHeadWidth = hv_HeadWidth/2.0;
      }
      //
      //Calculate end points of the arrow head.
      hv_RowP1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RowP1 = (hv_Row1+((hv_Length-hv_HeadLength)*hv_DR))+(hv_HalfHeadWidth*hv_DC);
      }
      hv_ColP1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColP1 = (hv_Column1+((hv_Length-hv_HeadLength)*hv_DC))-(hv_HalfHeadWidth*hv_DR);
      }
      hv_RowP2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RowP2 = (hv_Row1+((hv_Length-hv_HeadLength)*hv_DR))-(hv_HalfHeadWidth*hv_DC);
      }
      hv_ColP2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColP2 = (hv_Column1+((hv_Length-hv_HeadLength)*hv_DC))+(hv_HalfHeadWidth*hv_DR);
      }
      //
      //Finally create output XLD contour for each input point pair
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Length.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if ((int)(new HTuple(((hv_Length.TupleSelect(hv_Index))).TupleEqual(-1))) != 0)
        {
          //Create_ single points for arrows with identical start and end point
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_TempArrow.Dispose();
          HOperatorSet.GenContourPolygonXld(out ho_TempArrow, hv_Row1.TupleSelect(
              hv_Index), hv_Column1.TupleSelect(hv_Index));
          }
        }
        else
        {
          //Create arrow contour
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_TempArrow.Dispose();
          HOperatorSet.GenContourPolygonXld(out ho_TempArrow, ((((((((((hv_Row1.TupleSelect(
              hv_Index))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
              hv_RowP1.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
              hv_RowP2.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)), 
              ((((((((((hv_Column1.TupleSelect(hv_Index))).TupleConcat(hv_Column2.TupleSelect(
              hv_Index)))).TupleConcat(hv_ColP1.TupleSelect(hv_Index)))).TupleConcat(
              hv_Column2.TupleSelect(hv_Index)))).TupleConcat(hv_ColP2.TupleSelect(
              hv_Index)))).TupleConcat(hv_Column2.TupleSelect(hv_Index)));
          }
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ConcatObj(ho_Arrow, ho_TempArrow, out ExpTmpOutVar_0);
        ho_Arrow.Dispose();
        ho_Arrow = ExpTmpOutVar_0;
        }
      }
      ho_TempArrow.Dispose();

      hv_Length.Dispose();
      hv_ZeroLengthIndices.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_HalfHeadWidth.Dispose();
      hv_RowP1.Dispose();
      hv_ColP1.Dispose();
      hv_RowP2.Dispose();
      hv_ColP2.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_TempArrow.Dispose();

      hv_Length.Dispose();
      hv_ZeroLengthIndices.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_HalfHeadWidth.Dispose();
      hv_RowP1.Dispose();
      hv_ColP1.Dispose();
      hv_RowP2.Dispose();
      hv_ColP2.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Local procedures 
  public void AffineRect2Data (out HObject ho_ArrowAffineTrans, HTuple hv_Rect2Data, 
      HTuple hv_HomMat2D, out HTuple hv_AffineRect2Data)
  {



    // Local iconic variables 

    HObject ho_Arrow, ho_Rectangle;

    // Local control variables 

    HTuple hv_rightRow = new HTuple(), hv_rightCol = new HTuple();
    HTuple hv_AffineRow = new HTuple(), hv_AffineCol = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Distance = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ArrowAffineTrans);
    HOperatorSet.GenEmptyObj(out ho_Arrow);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    hv_AffineRect2Data = new HTuple();
    try
    {
      hv_Rect2Data[2]=-hv_Rect2Data[2].D;//C#ROI方向为反
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_rightRow.Dispose();hv_rightCol.Dispose();
      GetRect2Right(((((((((hv_Rect2Data.TupleSelect(0))).TupleConcat(hv_Rect2Data.TupleSelect(
          1)))).TupleConcat(hv_Rect2Data.TupleSelect(2)))).TupleConcat(hv_Rect2Data.TupleSelect(
          3)))).TupleConcat(hv_Rect2Data.TupleSelect(4)), out hv_rightRow, out hv_rightCol);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Arrow.Dispose();
      gen_arrow_contour_xld(out ho_Arrow, hv_Rect2Data.TupleSelect(0), hv_Rect2Data.TupleSelect(
          1), hv_rightRow, hv_rightCol, 15, 15);
      }

      ho_ArrowAffineTrans.Dispose();
      HOperatorSet.AffineTransContourXld(ho_Arrow, out ho_ArrowAffineTrans, hv_HomMat2D);
      hv_AffineRow.Dispose();hv_AffineCol.Dispose();
      HOperatorSet.GetContourXld(ho_ArrowAffineTrans, out hv_AffineRow, out hv_AffineCol);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle.Dispose();
      HOperatorSet.AngleLx(hv_AffineRow.TupleSelect(0), hv_AffineCol.TupleSelect(
          0), hv_AffineRow.TupleSelect(1), hv_AffineCol.TupleSelect(1), out hv_Angle);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Distance.Dispose();
      HOperatorSet.DistancePp(hv_AffineRow.TupleSelect(0), hv_AffineCol.TupleSelect(
          0), hv_AffineRow.TupleSelect(1), hv_AffineCol.TupleSelect(1), out hv_Distance);
      }

      //生成此矩形
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle2(out ho_Rectangle, hv_AffineRow.TupleSelect(0), hv_AffineCol.TupleSelect(
          0), hv_Angle, hv_Distance, hv_Rect2Data.TupleSelect(4));
      }
      //与rect2平行的为Length1,垂直的为Length2
      hv_AffineRect2Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_AffineRect2Data = new HTuple();
      hv_AffineRect2Data = hv_AffineRect2Data.TupleConcat(hv_AffineRow.TupleSelect(
          0));
      hv_AffineRect2Data = hv_AffineRect2Data.TupleConcat(hv_AffineCol.TupleSelect(
          0));
      hv_AffineRect2Data = hv_AffineRect2Data.TupleConcat(-hv_Angle);
      hv_AffineRect2Data = hv_AffineRect2Data.TupleConcat(hv_Distance);
      hv_AffineRect2Data = hv_AffineRect2Data.TupleConcat(hv_Rect2Data.TupleSelect(
          4));
      }
      ho_Arrow.Dispose();
      ho_Rectangle.Dispose();

      hv_rightRow.Dispose();
      hv_rightCol.Dispose();
      hv_AffineRow.Dispose();
      hv_AffineCol.Dispose();
      hv_Angle.Dispose();
      hv_Distance.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Arrow.Dispose();
      ho_Rectangle.Dispose();

      hv_rightRow.Dispose();
      hv_rightCol.Dispose();
      hv_AffineRow.Dispose();
      hv_AffineCol.Dispose();
      hv_Angle.Dispose();
      hv_Distance.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void CalRect2DirectEdgeCenter_FindLine (HTuple hv_Rect2Data, out HTuple hv_rightRow, 
      out HTuple hv_rightCol, out HTuple hv_LeftRow, out HTuple hv_LeftCol, out HTuple hv_TopRow, 
      out HTuple hv_TopCol, out HTuple hv_DownRow, out HTuple hv_DownCol)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Roi_CenterRow = new HTuple(), hv_Roi_CenterCol = new HTuple();
    HTuple hv_Roi_Phi = new HTuple(), hv_Roi_Length1 = new HTuple();
    HTuple hv_Roi_Length2 = new HTuple(), hv_calAngle = new HTuple();
    // Initialize local and output iconic variables 
    hv_rightRow = new HTuple();
    hv_rightCol = new HTuple();
    hv_LeftRow = new HTuple();
    hv_LeftCol = new HTuple();
    hv_TopRow = new HTuple();
    hv_TopCol = new HTuple();
    hv_DownRow = new HTuple();
    hv_DownCol = new HTuple();
    try
    {
      hv_Roi_CenterRow.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_CenterRow = hv_Rect2Data.TupleSelect(
          0);
      }
      hv_Roi_CenterCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_CenterCol = hv_Rect2Data.TupleSelect(
          1);
      }
      hv_Roi_Phi.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_Phi = hv_Rect2Data.TupleSelect(
          2);
      }
      hv_Roi_Length1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_Length1 = hv_Rect2Data.TupleSelect(
          3);
      }
      hv_Roi_Length2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_Length2 = hv_Rect2Data.TupleSelect(
          4);
      }
      //以矩形方向作为右
      if ((int)((new HTuple((new HTuple(0)).TupleLessEqual(hv_Roi_Phi.TupleDeg()))).TupleAnd(
          new HTuple(((hv_Roi_Phi.TupleDeg())).TupleLessEqual(90)))) != 0)
      {
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow-(hv_Roi_Length1*(hv_Roi_Phi.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol+(hv_Roi_Length1*(hv_Roi_Phi.TupleCos()
            ));
        }
        hv_LeftRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftRow = hv_Roi_CenterRow+(hv_Roi_Length1*(hv_Roi_Phi.TupleSin()
            ));
        }
        hv_LeftCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftCol = hv_Roi_CenterCol-(hv_Roi_Length1*(hv_Roi_Phi.TupleCos()
            ));
        }
        hv_DownRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownRow = hv_Roi_CenterRow+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_Roi_Phi)).TupleSin()));
        }
        hv_DownCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownCol = hv_Roi_CenterCol+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_Roi_Phi)).TupleCos()));
        }
        hv_TopRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopRow = hv_Roi_CenterRow-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_Roi_Phi)).TupleSin()));
        }
        hv_TopCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopCol = hv_Roi_CenterCol-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_Roi_Phi)).TupleCos()));
        }
      }
      else if ((int)((new HTuple((new HTuple(90)).TupleLess(hv_Roi_Phi.TupleDeg()
          ))).TupleAnd(new HTuple((new HTuple(181)).TupleGreaterEqual(hv_Roi_Phi.TupleDeg()
          )))) != 0)
      {
        hv_calAngle.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_calAngle = ((new HTuple(180)).TupleRad()
            )-hv_Roi_Phi;
        }
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow-(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol-(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
        hv_LeftRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftRow = hv_Roi_CenterRow+(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_LeftCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftCol = hv_Roi_CenterCol+(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
        hv_TopRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopRow = hv_Roi_CenterRow+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleSin()));
        }
        hv_TopCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopCol = hv_Roi_CenterCol-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleCos()));
        }
        hv_DownRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownRow = hv_Roi_CenterRow-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleSin()));
        }
        hv_DownCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownCol = hv_Roi_CenterCol+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleCos()));
        }
      }
      else if ((int)((new HTuple((new HTuple(-90)).TupleGreaterEqual(hv_Roi_Phi.TupleDeg()
          ))).TupleAnd(new HTuple((new HTuple(-181)).TupleLessEqual(hv_Roi_Phi.TupleDeg()
          )))) != 0)
      {
        hv_calAngle.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_calAngle = ((-180+(hv_Roi_Phi.TupleDeg()
            ))).TupleRad();
        }
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow+(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol-(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
        hv_LeftRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftRow = hv_Roi_CenterRow-(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_LeftCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftCol = hv_Roi_CenterCol+(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
        hv_DownRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownRow = hv_Roi_CenterRow-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleSin()));
        }
        hv_DownCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownCol = hv_Roi_CenterCol-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleCos()));
        }
        hv_TopRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopRow = hv_Roi_CenterRow+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleSin()));
        }
        hv_TopCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopCol = hv_Roi_CenterCol+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleCos()));
        }
      }
      else if ((int)((new HTuple((new HTuple(-90)).TupleLess(hv_Roi_Phi.TupleDeg()
          ))).TupleAnd(new HTuple((new HTuple(0)).TupleGreater(hv_Roi_Phi.TupleDeg()
          )))) != 0)
      {
        hv_calAngle.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_calAngle = ((((hv_Roi_Phi.TupleDeg()
            )).TupleAbs())).TupleRad();
        }
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow+(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol+(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
        hv_LeftRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftRow = hv_Roi_CenterRow-(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_LeftCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_LeftCol = hv_Roi_CenterCol-(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
        hv_TopRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopRow = hv_Roi_CenterRow-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleSin()));
        }
        hv_TopCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TopCol = hv_Roi_CenterCol+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleCos()));
        }
        hv_DownRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownRow = hv_Roi_CenterRow+(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleSin()));
        }
        hv_DownCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DownCol = hv_Roi_CenterCol-(hv_Roi_Length2*(((((new HTuple(90)).TupleRad()
            )-hv_calAngle)).TupleCos()));
        }
      }

      hv_Roi_CenterRow.Dispose();
      hv_Roi_CenterCol.Dispose();
      hv_Roi_Phi.Dispose();
      hv_Roi_Length1.Dispose();
      hv_Roi_Length2.Dispose();
      hv_calAngle.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Roi_CenterRow.Dispose();
      hv_Roi_CenterCol.Dispose();
      hv_Roi_Phi.Dispose();
      hv_Roi_Length1.Dispose();
      hv_Roi_Length2.Dispose();
      hv_calAngle.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void FindLine (HObject ho_Image, out HObject ho_Contour, out HObject ho_FitLine, 
      out HObject ho_Cross, HTuple hv_Rect2Data, HTuple hv_transition, HTuple hv_select, 
      HTuple hv_MeasureThreshold, out HTuple hv_CircleParam, out HTuple hv_errorLog)
  {




    // Local iconic variables 

    HObject ho_PolygonContour;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_MetrologyHandle = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_Row1 = new HTuple();
    HTuple hv_Column1 = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
    HTuple hv_StartPhi = new HTuple(), hv_EndPhi = new HTuple();
    HTuple hv_PointOrder = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_FitLine);
    HOperatorSet.GenEmptyObj(out ho_Cross);
    HOperatorSet.GenEmptyObj(out ho_PolygonContour);
    hv_CircleParam = new HTuple();
    hv_errorLog = new HTuple();
    try
    {

      if ((int)(new HTuple(((hv_Rect2Data.TupleSelect(2))).TupleLess(5))) != 0)
      {
        ho_PolygonContour.Dispose();

        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MetrologyHandle.Dispose();
        hv_Index.Dispose();
        hv_Exception.Dispose();
        hv_Row1.Dispose();
        hv_Column1.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_Radius.Dispose();
        hv_StartPhi.Dispose();
        hv_EndPhi.Dispose();
        hv_PointOrder.Dispose();

        return;
      }
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
      hv_MetrologyHandle.Dispose();
      HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
      HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, hv_Width, hv_Height);

      try
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Index.Dispose();
        HOperatorSet.AddMetrologyObjectCircleMeasure(hv_MetrologyHandle, hv_Rect2Data.TupleSelect(
            0), hv_Rect2Data.TupleSelect(1), hv_Rect2Data.TupleSelect(2), 20, 5, 
            1, 30, new HTuple(), new HTuple(), out hv_Index);
        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_errorLog.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_errorLog = "添加查找圆工具失败！"+hv_Exception;
        }
        ho_PolygonContour.Dispose();

        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MetrologyHandle.Dispose();
        hv_Index.Dispose();
        hv_Exception.Dispose();
        hv_Row1.Dispose();
        hv_Column1.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_Radius.Dispose();
        hv_StartPhi.Dispose();
        hv_EndPhi.Dispose();
        hv_PointOrder.Dispose();

        return;
      }


      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_Index, "measure_transition", 
          hv_transition);
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_Index, "measure_select", 
          hv_select);
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_Index, "min_score", 
          .9);
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_Index, "num_measures", 
          20);
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_Index, "distance_threshold", 
          1);

      HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);

      ho_Contour.Dispose();hv_Row1.Dispose();hv_Column1.Dispose();
      HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour, hv_MetrologyHandle, 
          "all", "all", out hv_Row1, out hv_Column1);
      HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
      if ((int)(new HTuple((new HTuple(hv_Row1.TupleLength())).TupleLess(3))) != 0)
      {
        hv_errorLog.Dispose();
        hv_errorLog = "边缘点数少于2个，拟合边缘失败！";
        ho_PolygonContour.Dispose();

        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MetrologyHandle.Dispose();
        hv_Index.Dispose();
        hv_Exception.Dispose();
        hv_Row1.Dispose();
        hv_Column1.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_Radius.Dispose();
        hv_StartPhi.Dispose();
        hv_EndPhi.Dispose();
        hv_PointOrder.Dispose();

        return;
      }
      ho_PolygonContour.Dispose();
      HOperatorSet.GenContourPolygonXld(out ho_PolygonContour, hv_Row1, hv_Column1);
      ho_Cross.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row1, hv_Column1, 6, 0.785398);

      hv_Row.Dispose();hv_Column.Dispose();hv_Radius.Dispose();hv_StartPhi.Dispose();hv_EndPhi.Dispose();hv_PointOrder.Dispose();
      HOperatorSet.FitCircleContourXld(ho_PolygonContour, "algebraic", -1, 0, 0, 
          3, 2, out hv_Row, out hv_Column, out hv_Radius, out hv_StartPhi, out hv_EndPhi, 
          out hv_PointOrder);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_FitLine.Dispose();
      HOperatorSet.GenCircleContourXld(out ho_FitLine, hv_Row, hv_Column, hv_Radius, 
          (new HTuple(0)).TupleRad(), (new HTuple(360)).TupleRad(), "positive", 1);
      }
      hv_CircleParam.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CircleParam = new HTuple();
      hv_CircleParam = hv_CircleParam.TupleConcat(hv_Row, hv_Column, hv_Radius);
      }
      ho_PolygonContour.Dispose();

      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MetrologyHandle.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();
      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Radius.Dispose();
      hv_StartPhi.Dispose();
      hv_EndPhi.Dispose();
      hv_PointOrder.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_PolygonContour.Dispose();

      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MetrologyHandle.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();
      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Radius.Dispose();
      hv_StartPhi.Dispose();
      hv_EndPhi.Dispose();
      hv_PointOrder.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void GetContourIndex (HObject ho_ClippedContours, out HTuple hv_contourRows, 
      out HTuple hv_contourCols)
  {



    // Local iconic variables 

    HObject ho_ObjectSelected=null;

    // Local control variables 

    HTuple hv_Number = new HTuple(), hv_Index2 = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Col = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    hv_contourRows = new HTuple();
    hv_contourCols = new HTuple();
    try
    {
      hv_Number.Dispose();
      HOperatorSet.CountObj(ho_ClippedContours, out hv_Number);
      hv_contourRows.Dispose();
      hv_contourRows = new HTuple();
      hv_contourCols.Dispose();
      hv_contourCols = new HTuple();
      HTuple end_val3 = hv_Number;
      HTuple step_val3 = 1;
      for (hv_Index2=1; hv_Index2.Continue(end_val3, step_val3); hv_Index2 = hv_Index2.TupleAdd(step_val3))
      {
        ho_ObjectSelected.Dispose();
        HOperatorSet.SelectObj(ho_ClippedContours, out ho_ObjectSelected, hv_Index2);
        hv_Row.Dispose();hv_Col.Dispose();
        HOperatorSet.GetContourXld(ho_ObjectSelected, out hv_Row, out hv_Col);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_contourRows = hv_contourRows.TupleConcat(
            hv_Row);
        hv_contourRows.Dispose();
        hv_contourRows = ExpTmpLocalVar_contourRows;
        }
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_contourCols = hv_contourCols.TupleConcat(
            hv_Col);
        hv_contourCols.Dispose();
        hv_contourCols = ExpTmpLocalVar_contourCols;
        }
        }
      }
      ho_ObjectSelected.Dispose();

      hv_Number.Dispose();
      hv_Index2.Dispose();
      hv_Row.Dispose();
      hv_Col.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ObjectSelected.Dispose();

      hv_Number.Dispose();
      hv_Index2.Dispose();
      hv_Row.Dispose();
      hv_Col.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void GetRect2Right (HTuple hv_Rect2Data, out HTuple hv_rightRow, out HTuple hv_rightCol)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Roi_CenterRow = new HTuple(), hv_Roi_CenterCol = new HTuple();
    HTuple hv_Roi_Phi = new HTuple(), hv_Roi_Length1 = new HTuple();
    HTuple hv_Roi_Length2 = new HTuple(), hv_calAngle = new HTuple();
    // Initialize local and output iconic variables 
    hv_rightRow = new HTuple();
    hv_rightCol = new HTuple();
    try
    {
      hv_Roi_CenterRow.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_CenterRow = hv_Rect2Data.TupleSelect(
          0);
      }
      hv_Roi_CenterCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_CenterCol = hv_Rect2Data.TupleSelect(
          1);
      }
      hv_Roi_Phi.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_Phi = hv_Rect2Data.TupleSelect(
          2);
      }
      hv_Roi_Length1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_Length1 = hv_Rect2Data.TupleSelect(
          3);
      }
      hv_Roi_Length2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Roi_Length2 = hv_Rect2Data.TupleSelect(
          4);
      }
      //以矩形方向作为右
      if ((int)((new HTuple((new HTuple(0)).TupleLessEqual(hv_Roi_Phi.TupleDeg()))).TupleAnd(
          new HTuple(((hv_Roi_Phi.TupleDeg())).TupleLessEqual(90)))) != 0)
      {
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow-(hv_Roi_Length1*(hv_Roi_Phi.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol+(hv_Roi_Length1*(hv_Roi_Phi.TupleCos()
            ));
        }
      }
      else if ((int)((new HTuple((new HTuple(90)).TupleLess(hv_Roi_Phi.TupleDeg()
          ))).TupleAnd(new HTuple((new HTuple(181)).TupleGreaterEqual(hv_Roi_Phi.TupleDeg()
          )))) != 0)
      {
        hv_calAngle.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_calAngle = ((new HTuple(180)).TupleRad()
            )-hv_Roi_Phi;
        }
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow-(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol-(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
      }
      else if ((int)((new HTuple((new HTuple(-90)).TupleGreaterEqual(hv_Roi_Phi.TupleDeg()
          ))).TupleAnd(new HTuple((new HTuple(-181)).TupleLessEqual(hv_Roi_Phi.TupleDeg()
          )))) != 0)
      {
        hv_calAngle.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_calAngle = ((-180+(hv_Roi_Phi.TupleDeg()
            ))).TupleRad();
        }
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow+(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol-(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
      }
      else if ((int)((new HTuple((new HTuple(-90)).TupleLess(hv_Roi_Phi.TupleDeg()
          ))).TupleAnd(new HTuple((new HTuple(0)).TupleGreater(hv_Roi_Phi.TupleDeg()
          )))) != 0)
      {
        hv_calAngle.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_calAngle = ((((hv_Roi_Phi.TupleDeg()
            )).TupleAbs())).TupleRad();
        }
        hv_rightRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightRow = hv_Roi_CenterRow+(hv_Roi_Length1*(hv_calAngle.TupleSin()
            ));
        }
        hv_rightCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_rightCol = hv_Roi_CenterCol+(hv_Roi_Length1*(hv_calAngle.TupleCos()
            ));
        }
      }

      hv_Roi_CenterRow.Dispose();
      hv_Roi_CenterCol.Dispose();
      hv_Roi_Phi.Dispose();
      hv_Roi_Length1.Dispose();
      hv_Roi_Length2.Dispose();
      hv_calAngle.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Roi_CenterRow.Dispose();
      hv_Roi_CenterCol.Dispose();
      hv_Roi_Phi.Dispose();
      hv_Roi_Length1.Dispose();
      hv_Roi_Length2.Dispose();
      hv_calAngle.Dispose();

      throw HDevExpDefaultException;
    }
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_Circle, ho_Contour, ho_FitLine;
    HObject ho_Cross;

    // Local control variables 

    HTuple hv_Transition = new HTuple(), hv_Select = new HTuple();
    HTuple hv_MeasureThreshold = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Radius = new HTuple(), hv_AffineRect2Data = new HTuple();
    HTuple hv_CircleParam = new HTuple(), hv_errorLog = new HTuple();
    HTuple hv_ang = new HTuple(), hv_Colors = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Circle);
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_FitLine);
    HOperatorSet.GenEmptyObj(out ho_Cross);
    try
    {
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "C:/Users/lq789/Desktop/1_1.bmp");


      hv_Transition.Dispose();
      hv_Transition = "positive";
      hv_Select.Dispose();
      hv_Select = "first";
      hv_MeasureThreshold.Dispose();
      hv_MeasureThreshold = 20;
      if (HDevWindowStack.IsOpen())
      {
        hv_WindowHandle = HDevWindowStack.GetActive();
      }
      hv_Row.Dispose();hv_Column.Dispose();hv_Radius.Dispose();
      HOperatorSet.DrawCircle(hv_WindowHandle, out hv_Row, out hv_Column, out hv_Radius);
      ho_Circle.Dispose();
      HOperatorSet.GenCircle(out ho_Circle, hv_Row, hv_Column, hv_Radius);
      hv_AffineRect2Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_AffineRect2Data = new HTuple();
      hv_AffineRect2Data = hv_AffineRect2Data.TupleConcat(hv_Row, hv_Column, hv_Radius);
      }
      ho_Contour.Dispose();ho_FitLine.Dispose();ho_Cross.Dispose();hv_CircleParam.Dispose();hv_errorLog.Dispose();
      FindLine(ho_Image, out ho_Contour, out ho_FitLine, out ho_Cross, hv_AffineRect2Data, 
          hv_Transition, hv_Select, hv_MeasureThreshold, out hv_CircleParam, out hv_errorLog);
      hv_ang.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ang = ((hv_AffineRect2Data.TupleSelect(
          2))).TupleDeg();
      }
      //仿射变换Rect2的5个参数
      hv_Colors.Dispose();
      HOperatorSet.QueryAllColors(hv_WindowHandle, out hv_Colors);
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_Circle.Dispose();
      ho_Contour.Dispose();
      ho_FitLine.Dispose();
      ho_Cross.Dispose();

      hv_Transition.Dispose();
      hv_Select.Dispose();
      hv_MeasureThreshold.Dispose();
      hv_WindowHandle.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Radius.Dispose();
      hv_AffineRect2Data.Dispose();
      hv_CircleParam.Dispose();
      hv_errorLog.Dispose();
      hv_ang.Dispose();
      hv_Colors.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image.Dispose();
    ho_Circle.Dispose();
    ho_Contour.Dispose();
    ho_FitLine.Dispose();
    ho_Cross.Dispose();

    hv_Transition.Dispose();
    hv_Select.Dispose();
    hv_MeasureThreshold.Dispose();
    hv_WindowHandle.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Radius.Dispose();
    hv_AffineRect2Data.Dispose();
    hv_CircleParam.Dispose();
    hv_errorLog.Dispose();
    hv_ang.Dispose();
    hv_Colors.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

